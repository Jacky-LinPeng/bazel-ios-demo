
load(
  "//Vendor/rules_pods/BazelExtensions:extensions.bzl",
  "acknowledged_target",
  "gen_module_map",
  "gen_includes",
  "headermap",
  "umbrella_header"
)
# Add a config setting release for compilation mode
# Assume that people are using `opt` for release mode
# see the bazel user manual for more information
# https://docs.bazel.build/versions/master/be/general.html#config_setting
config_setting(
  name = "release",
  values = {
    "compilation_mode": "opt"
  }
)
config_setting(
  name = "osxCase",
  values = {
    "apple_platform_type": "macos"
  }
)
config_setting(
  name = "tvosCase",
  values = {
    "apple_platform_type": "tvos"
  }
)
config_setting(
  name = "watchosCase",
  values = {
    "apple_platform_type": "watchos"
  }
)
filegroup(
  name = "AFNetworking_package_hdrs",
  srcs = [
    "AFNetworking_cxx_direct_hdrs",
    "AFNetworking_direct_hdrs",
    "Serialization_direct_hdrs",
    "Security_direct_hdrs",
    "Reachability_direct_hdrs",
    "NSURLSession_direct_hdrs",
    "UIKit_cxx_direct_hdrs",
    "UIKit_direct_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "AFNetworking_cxx_direct_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "AFNetworking/AFNetworking.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "AFNetworking_cxx_public_hdrs",
  srcs = glob(
    [
      "AFNetworking/AFNetworking.h"
    ]
  ) + [
    ":NSURLSession_public_hdrs",
    ":Reachability_public_hdrs",
    ":Security_public_hdrs",
    ":Serialization_public_hdrs",
    ":UIKit_public_hdrs",
    ":UIKit_cxx_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "AFNetworking_cxx_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "AFNetworking/AFNetworking.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "AFNetworking_cxx_union_hdrs",
  srcs = [
    "AFNetworking_cxx_hdrs",
    "AFNetworking_hdrs",
    ":NSURLSession_hdrs",
    ":Reachability_hdrs",
    ":Security_hdrs",
    ":Serialization_hdrs",
    ":UIKit_hdrs",
    ":UIKit_cxx_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "AFNetworking_cxx_hmap",
  namespace = "AFNetworking",
  hdrs = [
    "AFNetworking_package_hdrs",
    ":AFNetworking_cxx_union_hdrs"
  ],
  deps = [
    ":NSURLSession_hmap",
    ":Reachability_hmap",
    ":Security_hmap",
    ":Serialization_hmap",
    ":UIKit_cxx_hmap",
    ":UIKit_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "AFNetworking_cxx",
  enable_modules = 1,
  hdrs = [
    ":AFNetworking_cxx_hdrs",
    ":AFNetworking_cxx_hmap"
  ],
  pch = "pod_support/Headers/Private/AFNetworking-prefix.pch",
  deps = [
    ":NSURLSession",
    ":Reachability",
    ":Security",
    ":Serialization",
    ":UIKit",
    ":UIKit_cxx",
    ":AFNetworking_cxx_hmap"
  ],
  copts = [
    "-std=c++14",
    "-Wno-everything",
    "-Wnon-modular-include-in-framework-module",
    "-g",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fembed-bitcode-marker",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-error=nonportable-include-path"
  ] + select(
    {
      "//conditions:default": [
        "-DDEBUG=1",
        "-DPOD_CONFIGURATION_DEBUG=1"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-I$(GENDIR)/Vendor/AFNetworking/AFNetworking_cxx_hmap.hmap",
    "-I."
  ] + [
    "-fmodule-name=AFNetworking",
    "-fmodules"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "AFNetworking_cxx_acknowledgement",
  deps = [],
  value = "//Vendor/AFNetworking/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "AFNetworking_direct_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "AFNetworking/AFNetworking.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "AFNetworking_public_hdrs",
  srcs = glob(
    [
      "AFNetworking/AFNetworking.h"
    ]
  ) + [
    ":AFNetworking_cxx_public_hdrs",
    ":NSURLSession_public_hdrs",
    ":Reachability_public_hdrs",
    ":Security_public_hdrs",
    ":Serialization_public_hdrs",
    ":UIKit_public_hdrs",
    ":UIKit_cxx_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "AFNetworking_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "AFNetworking/AFNetworking.h"
    ]
  ) + [
    ":AFNetworking_cxx_hdrs",
    ":NSURLSession_hdrs",
    ":Reachability_hdrs",
    ":Security_hdrs",
    ":Serialization_hdrs",
    ":UIKit_hdrs",
    ":UIKit_cxx_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "AFNetworking_hmap",
  namespace = "AFNetworking",
  hdrs = [
    "AFNetworking_package_hdrs",
    ":AFNetworking_hdrs"
  ],
  deps = [
    ":AFNetworking_cxx_hmap",
    ":NSURLSession_hmap",
    ":Reachability_hmap",
    ":Security_hmap",
    ":Serialization_hmap",
    ":UIKit_cxx_hmap",
    ":UIKit_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "AFNetworking",
  enable_modules = 1,
  hdrs = [
    ":AFNetworking_hdrs",
    ":AFNetworking_hmap"
  ],
  pch = "pod_support/Headers/Private/AFNetworking-prefix.pch",
  deps = [
    ":AFNetworking_cxx",
    ":NSURLSession",
    ":Reachability",
    ":Security",
    ":Serialization",
    ":UIKit",
    ":UIKit_cxx",
    ":AFNetworking_hmap"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-everything",
    "-Wnon-modular-include-in-framework-module",
    "-g",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fembed-bitcode-marker",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-error=nonportable-include-path"
  ] + select(
    {
      "//conditions:default": [
        "-DDEBUG=1",
        "-DPOD_CONFIGURATION_DEBUG=1"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-I$(GENDIR)/Vendor/AFNetworking/AFNetworking_hmap.hmap",
    "-I."
  ] + [
    "-fmodule-name=AFNetworking",
    "-fmodules"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "AFNetworking_acknowledgement",
  deps = [],
  value = "//Vendor/AFNetworking/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "Serialization_direct_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "AFNetworking/AFURLRequestSerialization.h",
      "AFNetworking/AFURLResponseSerialization.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Serialization_public_hdrs",
  srcs = glob(
    [
      "AFNetworking/AFURLRequestSerialization.h",
      "AFNetworking/AFURLResponseSerialization.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Serialization_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "AFNetworking/AFURLRequestSerialization.h",
      "AFNetworking/AFURLResponseSerialization.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Serialization_union_hdrs",
  srcs = [
    "Serialization_hdrs",
    "AFNetworking_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "Serialization_hmap",
  namespace = "AFNetworking",
  hdrs = [
    "AFNetworking_package_hdrs",
    ":Serialization_union_hdrs"
  ],
  deps = [],
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Serialization",
  enable_modules = 1,
  srcs = glob(
    [
      "AFNetworking/AFURLRequestSerialization.m",
      "AFNetworking/AFURLResponseSerialization.m"
    ],
    exclude = [
      "AFNetworking/AFHTTPSessionManager.m",
      "AFNetworking/AFURLSessionManager.m"
    ]
  ),
  hdrs = [
    ":Serialization_hdrs",
    ":Serialization_hmap"
  ],
  pch = "pod_support/Headers/Private/AFNetworking-prefix.pch",
  deps = [
    ":Serialization_hmap"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-everything",
    "-Wnon-modular-include-in-framework-module",
    "-g",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fembed-bitcode-marker",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-error=nonportable-include-path"
  ] + select(
    {
      "//conditions:default": [
        "-DDEBUG=1",
        "-DPOD_CONFIGURATION_DEBUG=1"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-I$(GENDIR)/Vendor/AFNetworking/Serialization_hmap.hmap",
    "-I."
  ] + [
    "-fmodule-name=AFNetworking",
    "-fmodules"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "Serialization_acknowledgement",
  deps = [],
  value = "//Vendor/AFNetworking/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "Security_direct_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "AFNetworking/AFSecurityPolicy.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Security_public_hdrs",
  srcs = glob(
    [
      "AFNetworking/AFSecurityPolicy.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Security_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "AFNetworking/AFSecurityPolicy.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Security_union_hdrs",
  srcs = [
    "Security_hdrs",
    "AFNetworking_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "Security_hmap",
  namespace = "AFNetworking",
  hdrs = [
    "AFNetworking_package_hdrs",
    ":Security_union_hdrs"
  ],
  deps = [],
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Security",
  enable_modules = 1,
  srcs = glob(
    [
      "AFNetworking/AFSecurityPolicy.m"
    ],
    exclude = [
      "AFNetworking/AFHTTPSessionManager.m",
      "AFNetworking/AFURLSessionManager.m"
    ]
  ),
  hdrs = [
    ":Security_hdrs",
    ":Security_hmap"
  ],
  pch = "pod_support/Headers/Private/AFNetworking-prefix.pch",
  deps = [
    ":Security_hmap"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-everything",
    "-Wnon-modular-include-in-framework-module",
    "-g",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fembed-bitcode-marker",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-error=nonportable-include-path"
  ] + select(
    {
      "//conditions:default": [
        "-DDEBUG=1",
        "-DPOD_CONFIGURATION_DEBUG=1"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-I$(GENDIR)/Vendor/AFNetworking/Security_hmap.hmap",
    "-I."
  ] + [
    "-fmodule-name=AFNetworking",
    "-fmodules"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "Security_acknowledgement",
  deps = [],
  value = "//Vendor/AFNetworking/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "Reachability_direct_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "AFNetworking/AFNetworkReachabilityManager.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Reachability_public_hdrs",
  srcs = glob(
    [
      "AFNetworking/AFNetworkReachabilityManager.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Reachability_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "AFNetworking/AFNetworkReachabilityManager.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Reachability_union_hdrs",
  srcs = [
    "Reachability_hdrs",
    "AFNetworking_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "Reachability_hmap",
  namespace = "AFNetworking",
  hdrs = [
    "AFNetworking_package_hdrs",
    ":Reachability_union_hdrs"
  ],
  deps = [],
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "Reachability",
  enable_modules = 1,
  srcs = glob(
    [
      "AFNetworking/AFNetworkReachabilityManager.m"
    ]
  ),
  hdrs = [
    ":Reachability_hdrs",
    ":Reachability_hmap"
  ],
  pch = "pod_support/Headers/Private/AFNetworking-prefix.pch",
  deps = [
    ":Reachability_hmap"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-everything",
    "-Wnon-modular-include-in-framework-module",
    "-g",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fembed-bitcode-marker",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-error=nonportable-include-path"
  ] + select(
    {
      "//conditions:default": [
        "-DDEBUG=1",
        "-DPOD_CONFIGURATION_DEBUG=1"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-I$(GENDIR)/Vendor/AFNetworking/Reachability_hmap.hmap",
    "-I."
  ] + [
    "-fmodule-name=AFNetworking",
    "-fmodules"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "Reachability_acknowledgement",
  deps = [],
  value = "//Vendor/AFNetworking/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "NSURLSession_direct_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "AFNetworking/AFCompatibilityMacros.h",
      "AFNetworking/AFHTTPSessionManager.h",
      "AFNetworking/AFURLSessionManager.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "NSURLSession_public_hdrs",
  srcs = glob(
    [
      "AFNetworking/AFCompatibilityMacros.h",
      "AFNetworking/AFHTTPSessionManager.h",
      "AFNetworking/AFURLSessionManager.h"
    ]
  ) + [
    ":Security_public_hdrs",
    ":Serialization_public_hdrs"
  ] + select(
    {
      "//conditions:default": [
        ":Reachability_public_hdrs"
      ],
      ":osxCase": [
        ":Reachability_public_hdrs"
      ],
      ":tvosCase": [
        ":Reachability_public_hdrs"
      ]
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "NSURLSession_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "AFNetworking/AFCompatibilityMacros.h",
      "AFNetworking/AFHTTPSessionManager.h",
      "AFNetworking/AFURLSessionManager.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "NSURLSession_union_hdrs",
  srcs = [
    "NSURLSession_hdrs",
    "AFNetworking_hdrs"
  ] + [
    ":Security_hdrs",
    ":Serialization_hdrs"
  ] + select(
    {
      "//conditions:default": [
        ":Reachability_hdrs"
      ],
      ":osxCase": [
        ":Reachability_hdrs"
      ],
      ":tvosCase": [
        ":Reachability_hdrs"
      ]
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "NSURLSession_hmap",
  namespace = "AFNetworking",
  hdrs = [
    "AFNetworking_package_hdrs",
    ":NSURLSession_union_hdrs"
  ],
  deps = [
    ":Security_hmap",
    ":Serialization_hmap"
  ] + select(
    {
      "//conditions:default": [
        ":Reachability_hmap"
      ],
      ":osxCase": [
        ":Reachability_hmap"
      ],
      ":tvosCase": [
        ":Reachability_hmap"
      ]
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "NSURLSession",
  enable_modules = 1,
  srcs = glob(
    [
      "AFNetworking/AFHTTPSessionManager.m",
      "AFNetworking/AFURLSessionManager.m"
    ],
    exclude = [
      "UIKit+AFNetworking/**/*.cc",
      "UIKit+AFNetworking/**/*.cpp",
      "UIKit+AFNetworking/**/*.cxx",
      "UIKit+AFNetworking/**/*.mm",
      "UIKit+AFNetworking/**/*.S",
      "UIKit+AFNetworking/**/*.c",
      "UIKit+AFNetworking/**/*.m",
      "UIKit+AFNetworking/**/*.s"
    ]
  ),
  hdrs = [
    ":NSURLSession_hdrs",
    ":NSURLSession_hmap"
  ],
  pch = "pod_support/Headers/Private/AFNetworking-prefix.pch",
  deps = [
    ":Security",
    ":Serialization"
  ] + select(
    {
      "//conditions:default": [
        ":Reachability"
      ],
      ":osxCase": [
        ":Reachability"
      ],
      ":tvosCase": [
        ":Reachability"
      ]
    }
  ) + [
    ":NSURLSession_hmap"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-everything",
    "-Wnon-modular-include-in-framework-module",
    "-g",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fembed-bitcode-marker",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-error=nonportable-include-path"
  ] + select(
    {
      "//conditions:default": [
        "-DDEBUG=1",
        "-DPOD_CONFIGURATION_DEBUG=1"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-I$(GENDIR)/Vendor/AFNetworking/NSURLSession_hmap.hmap",
    "-I."
  ] + [
    "-fmodule-name=AFNetworking",
    "-fmodules"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "NSURLSession_acknowledgement",
  deps = [],
  value = "//Vendor/AFNetworking/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "UIKit_cxx_direct_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "UIKit+AFNetworking/**/*.h",
      "UIKit+AFNetworking/**/*.hpp",
      "UIKit+AFNetworking/**/*.hxx"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "UIKit_cxx_public_hdrs",
  srcs = glob(
    [
      "UIKit+AFNetworking/**/*.h",
      "UIKit+AFNetworking/**/*.hpp",
      "UIKit+AFNetworking/**/*.hxx"
    ]
  ) + [
    ":NSURLSession_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "UIKit_cxx_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "UIKit+AFNetworking/**/*.h",
      "UIKit+AFNetworking/**/*.hpp",
      "UIKit+AFNetworking/**/*.hxx"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "UIKit_cxx_union_hdrs",
  srcs = [
    "UIKit_cxx_hdrs",
    "AFNetworking_hdrs",
    ":NSURLSession_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "UIKit_cxx_hmap",
  namespace = "AFNetworking",
  hdrs = [
    "AFNetworking_package_hdrs",
    ":UIKit_cxx_union_hdrs"
  ],
  deps = [
    ":NSURLSession_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "UIKit_cxx",
  enable_modules = 1,
  srcs = glob(
    [
      "UIKit+AFNetworking/**/*.cc",
      "UIKit+AFNetworking/**/*.cpp",
      "UIKit+AFNetworking/**/*.cxx",
      "UIKit+AFNetworking/**/*.mm"
    ],
    exclude = [
      "UIKit+AFNetworking/**/*.S",
      "UIKit+AFNetworking/**/*.c",
      "UIKit+AFNetworking/**/*.m",
      "UIKit+AFNetworking/**/*.s"
    ]
  ),
  hdrs = [
    ":UIKit_cxx_hdrs",
    ":UIKit_cxx_hmap"
  ],
  pch = "pod_support/Headers/Private/AFNetworking-prefix.pch",
  deps = [
    ":NSURLSession",
    ":UIKit_cxx_hmap"
  ],
  copts = [
    "-std=c++14",
    "-Wno-everything",
    "-Wnon-modular-include-in-framework-module",
    "-g",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fembed-bitcode-marker",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-error=nonportable-include-path"
  ] + select(
    {
      "//conditions:default": [
        "-DDEBUG=1",
        "-DPOD_CONFIGURATION_DEBUG=1"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-I$(GENDIR)/Vendor/AFNetworking/UIKit_cxx_hmap.hmap",
    "-I."
  ] + [
    "-fmodule-name=AFNetworking",
    "-fmodules"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "UIKit_cxx_acknowledgement",
  deps = [],
  value = "//Vendor/AFNetworking/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "UIKit_direct_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "UIKit+AFNetworking/**/*.h",
      "UIKit+AFNetworking/**/*.hpp",
      "UIKit+AFNetworking/**/*.hxx"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "UIKit_public_hdrs",
  srcs = glob(
    [
      "UIKit+AFNetworking/**/*.h",
      "UIKit+AFNetworking/**/*.hpp",
      "UIKit+AFNetworking/**/*.hxx"
    ]
  ) + [
    ":NSURLSession_public_hdrs",
    ":UIKit_cxx_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "UIKit_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*",
      "UIKit+AFNetworking/**/*.h",
      "UIKit+AFNetworking/**/*.hpp",
      "UIKit+AFNetworking/**/*.hxx"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "UIKit_union_hdrs",
  srcs = [
    "UIKit_hdrs",
    "AFNetworking_hdrs",
    ":NSURLSession_hdrs",
    ":UIKit_cxx_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "UIKit_hmap",
  namespace = "AFNetworking",
  hdrs = [
    "AFNetworking_package_hdrs",
    ":UIKit_union_hdrs"
  ],
  deps = [
    ":NSURLSession_hmap",
    ":UIKit_cxx_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "UIKit",
  enable_modules = 1,
  srcs = glob(
    [
      "UIKit+AFNetworking/**/*.S",
      "UIKit+AFNetworking/**/*.c",
      "UIKit+AFNetworking/**/*.m",
      "UIKit+AFNetworking/**/*.s"
    ]
  ),
  hdrs = [
    ":UIKit_hdrs",
    ":UIKit_hmap"
  ],
  pch = "pod_support/Headers/Private/AFNetworking-prefix.pch",
  deps = [
    ":NSURLSession",
    ":UIKit_cxx",
    ":UIKit_hmap"
  ],
  copts = [
    "-fobjc-weak",
    "-Wno-everything",
    "-Wnon-modular-include-in-framework-module",
    "-g",
    "-stdlib=libc++",
    "-DCOCOAPODS=1",
    "-DOBJC_OLD_DISPATCH_PROTOTYPES=0",
    "-fdiagnostics-show-note-include-stack",
    "-fno-common",
    "-fembed-bitcode-marker",
    "-fmessage-length=0",
    "-fpascal-strings",
    "-fstrict-aliasing",
    "-Wno-error=nonportable-include-path"
  ] + select(
    {
      "//conditions:default": [
        "-DDEBUG=1",
        "-DPOD_CONFIGURATION_DEBUG=1"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-I$(GENDIR)/Vendor/AFNetworking/UIKit_hmap.hmap",
    "-I."
  ] + [
    "-fmodule-name=AFNetworking",
    "-fmodules"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "UIKit_acknowledgement",
  deps = [],
  value = "//Vendor/AFNetworking/pod_support_buildable:acknowledgement_fragment"
)